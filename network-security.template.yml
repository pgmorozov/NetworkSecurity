jobs:
- job: NetworkSecurityDemo
  displayName: Network Security Demo
  timeoutInMinutes: 120
  pool:
    vmImage: 'ubuntu-latest'

  variables:
  - template: network-security.variables.yml
  
  steps:
  - checkout: self
  
  - script: |
        wget -O azcopy.tar.gz https://aka.ms/downloadazcopylinux64
        tar -xf azcopy.tar.gz
        sudo ./install.sh
  
  - task: AzureKeyVault@1
    displayName: Load Secrets
    inputs:
      azureSubscription: '$(keyVaultSubscriptionEndpoint)'
      KeyVaultName: '$(keyVaultName)'
      SecretsFilter: 'defaultUsername, defaultPassword'

  - task: AzurePowerShell@4
    displayName: Deploy resource group
    inputs:
      azurePowerShellVersion: LatestVersion    
      azureSubscription: '$(azureSubscriptionEndpoint)'
      ScriptType: InlineScript
      Inline: |
        if(!(Get-AzResourceGroup|where ResourceGroupName -eq '$(RGName)'))
        {
          New-AzResourceGroup -Name '$(RGName)' -Location $(location) 
        }

  - task: AzurePowerShell@4
    displayName: Deploy resources
    inputs:
      azurePowerShellVersion: LatestVersion    
      azureSubscription: '$(azureSubscriptionEndpoint)'
      ScriptType: InlineScript
      Inline: |
        Get-AzKeyVault -InRemovedState | ? VaultName -EQ $(resourceNames).keyVaultName | Remove-AzKeyVault -InRemovedState -Force
        
        $storage = Get-AzStorageAccount -ResourceGroupName '$(RGName)'|? StorageAccountName -EQ $(resourceNames).storage.ToLower()
        if(-not $storage)
        {
            $storage = New-AzStorageAccount -ResourceGroupName '$(RGName)' -Name $(resourceNames).storage.ToLower() -SkuName Standard_LRS -Location '$(location)'
        }

        $container = Get-AzStorageContainer -Context $storage.Context|? Name -EQ 'template-files'
        if(-not $container)
        {
            $container = New-AzStorageContainer -Context $storage.Context -Name 'template-files'
        }

        $token = New-AzStorageAccountSASToken -Service Blob,File,Table,Queue -ResourceType Service,Container,Object -Permission "racwdlup" -Context $storage.Context

        azcopy copy "$(Build.SourcesDirectory)/NetworkSecurity/*" "https://$($(resourceNames).storage.ToLower()).blob.core.windows.net/template-files/$token" --recursive=true

        $tokenSecured = ConvertTo-SecureString $token -AsPlainText -Force

        New-AzResourceGroupDeployment -ResourceGroupName '$(RGName)' `
                                      -TemplateFile '$(Build.SourcesDirectory)/NetworkSecurity/main.template.json' `
                                      -location '$(location)' `
                                      -resourceNames $(resourceNames) `
                                      -filesLocation "$($storage.Context.BlobEndPoint)template-files" `
                                      -sasToken $tokenSecured `
                                      -workspaceResourceGroup $(resourceNames).logAnalyticsWsRGName `
                                      -workspaceName $(resourceNames).logAnalyticsWs `
                                      -defaultUserName (ConvertTo-SecureString '$(defaultUserName)' -AsPlainText -Force) `
                                      -defaultPassword (ConvertTo-SecureString '$(defaultPassword)' -AsPlainText -Force) `
                                      -Verbose

  - task: AzurePowerShell@4
    displayName: Import DSC modules
    enabled: false
    inputs:
      azurePowerShellVersion: LatestVersion    
      azureSubscription: '$(azureSubscriptionEndpoint)'
      ScriptType: InlineScript
      Inline: |
        New-AzResourceGroupDeployment -ResourceGroupName '$(automationAccountRGName)' `
          -TemplateFile '$(Build.SourcesDirectory)/NetworkSecurity/DSC/dscModules.json' `
          -automationAccountName $(automationAccountName) `
          -Verbose

  - task: AzurePowerShell@4
    displayName: Import DSC configuration
    enabled: false
    inputs:
      azurePowerShellVersion: LatestVersion    
      azureSubscription: '$(azureSubscriptionEndpoint)'
      ScriptType: InlineScript
      Inline: |
        $configurations = Get-ChildItem -Path '$(Build.SourcesDirectory)/NetworkSecurity/DSC/Configurations' -File

        foreach ($configuration in $configurations) 
        {
            Import-AzAutomationDscConfiguration -SourcePath $configuration.FullName -ResourceGroupName $(automationAccountRGName) -AutomationAccountName $(automationAccountName) -Published -Force
        }

  - task: AzurePowerShell@4
    displayName: Compile DSC configuration
    enabled: false
    inputs:
      azurePowerShellVersion: LatestVersion    
      azureSubscription: '$(azureSubscriptionEndpoint)'
      ScriptType: InlineScript
      Inline: |
        $configurations = @(
          @{
            name = 'SetupWinVM'
          }
        )

        foreach ($configuration in $configurations) {
          $attempt = 1
          do {
            Write-Host "Compile $($configuration.name) configuration. Attempt: $attempt"
            $compilationJob = Start-AzAutomationDscCompilationJob -ResourceGroupName $(automationAccountRGName) -AutomationAccountName $(automationAccountName) -ConfigurationName $configuration.name -Parameters $configuration.parameters

            while ($null -eq $compilationJob.EndTime -and $null -eq $compilationJob.Exception)
            {
                $compilationJob = $compilationJob | Get-AzAutomationDscCompilationJob
                Start-Sleep -Seconds 3
            }
          } while ($attempt++ -lt 3 -and $compilationJob.Exception)

          if ($compilationJob.Exception) { throw $compilationJob.Exception }
        }

  - task: AzurePowerShell@4
    displayName: Apply DSC configurations
    enabled: false
    inputs:
      azurePowerShellVersion: LatestVersion    
      azureSubscription: '$(azureSubscriptionEndpoint)'
      ScriptType: InlineScript
      Inline: |
        Get-AzAutomationDscNode -ResourceGroupName $(automationAccountRGName) -AutomationAccountName $(automationAccountName) | ? Status -eq 'Unresponsive' | Unregister-AzAutomationDscNode -Force

        $configurations = @(
          @{
            name = 'SetupWinVM'
            vmName = $(resourceNames).win2019Vm
          },
          @{
            name = 'SetupWinVM'
            vmName = $(resourceNames).win10Vm
          }
        )

        New-AzResourceGroupDeployment -ResourceGroupName '$(RGName)' `
          -TemplateFile '$(Build.SourcesDirectory)/NetworkSecurity/DSC/appplyConfigurations.json' `
          -location $(location) `
          -configurations $configurations `
          -automationAccountName $(automationAccountName) `
          -automationAccountRGName $(automationAccountRGName) `
          -Verbose